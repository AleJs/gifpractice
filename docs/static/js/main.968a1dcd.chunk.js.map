{"version":3,"sources":["componens/AddCategoris.js","componens/GifGriditems.js","componens/Helpers/GetGif.js","componens/hooks/useLoadingHook.js","componens/GifGrid.js","GifExpertapp.js","reportWebVitals.js","index.js"],"names":["AddCategoris","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGriditems","img","title","id","className","src","alt","getGifs","category","a","url","fetch","resp","json","data","gif","map","images","downsized_medium","useLoadingHook","loading","state","setState","useEffect","then","GifGrid","key","GifExpertapp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qLAuBeA,MApBf,YAA0C,IAAlBC,EAAiB,EAAjBA,cAAiB,EACHC,mBAAS,cADN,mBAChCC,EADgC,KACpBC,EADoB,KAYvC,OACE,mCACE,sBAAMC,SATW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAb3B,SAACP,GAChBF,EAAcE,EAAEQ,OAAOF,e,OCSZG,EAbM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,MAAgB,EAATC,GAClC,OACE,qBAAKC,UAAU,YAAf,SACE,6BACE,qBAAIA,UAAU,8BAAd,UACE,oBAAIA,UAAU,QAAd,SAAuBF,IACvB,qBAAKE,UAAU,MAAMC,IAAKJ,EAAKK,IAAI,a,wBCRhCC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EACJ,0CACAF,EACA,qDAJmB,SAKFG,MAAMD,GALJ,cAKfE,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAMD,EAAKE,KAAI,SAACf,GACpB,MAAO,CACLE,GAAIF,EAAIE,GACRF,IAAKA,EAAIgB,OAAOC,iBAAiBR,IACjCR,MAAOD,EAAIC,UAbM,kBAgBda,GAhBc,4CAAH,sDCgBLI,EAbQ,SAACX,GAAc,IAAD,EACTrB,mBAAS,CACjC2B,KAAM,GACNM,SAAS,IAHwB,mBAC5BC,EAD4B,KACrBC,EADqB,KAUnC,OALAC,qBAAU,WACRhB,EAAQC,GAAUgB,MAAK,SAACvB,GACtBqB,EAAS,CAAER,KAAMb,EAAKmB,SAAS,SAEhC,CAACZ,IACGa,GCUMI,EAnBC,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,EACNW,EAAeX,GAAjCM,EADwB,EACxBA,KAAMM,EADkB,EAClBA,QAEd,OACE,qCACE,mCAAMZ,KAELY,GAAW,2CACZ,8BACE,oBAAIhB,UAAU,QAAd,SACGU,EAAKE,KAAI,SAACf,GAAD,OACR,wBAAC,EAAD,2BAAkBA,GAAlB,IAAuByB,IAAKzB,EAAIE,iBCW7BwB,MArBf,WAAyB,IAAD,EACcxC,mBAAS,CAAC,KADxB,mBACfyC,EADe,KACH1C,EADG,KAMtB,OACE,qCACE,oBAAIkB,UAAU,QAAd,0BACA,cAAC,EAAD,CAAclB,cAAeA,IAC7B,uBAEA,6BACG0C,EAAWZ,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCPTqB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.968a1dcd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./GifGriditems.css\";\r\nimport PropTypes from \"prop-types\";\r\nfunction AddCategoris({ setCategories }) {\r\n  const [inputValue, setInputValue] = useState(\"hola mundo\");\r\n  const newInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={inputValue} onChange={newInput} />\r\n      </form>\r\n    </>\r\n  );\r\n}\r\nexport default AddCategoris;\r\n\r\nAddCategoris.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport \"./GifGriditems.css\";\r\nconst GifGriditems = ({ img, title, id }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <ol>\r\n        <li className=\"card animate__fadeIn-5s 5s \">\r\n          <h1 className=\"title\">{title}</h1>\r\n          <img className=\"img\" src={img} alt=\"\" />\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGriditems;\r\n","export const getGifs = async (category) => {\r\n  const url =\r\n    \"https://api.giphy.com/v1/gifs/search?q=\" +\r\n    category +\r\n    \"&limit=10&api_key=ne9CNRTOcFIH7aoIw00QLWQtbuMENWaM\";\r\n  const resp = await fetch(url);\r\n\r\n  const { data } = await resp.json();\r\n\r\n  const gif = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      img: img.images.downsized_medium.url,\r\n      title: img.title,\r\n    };\r\n  });\r\n  return gif;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../Helpers/GetGif\";\r\n\r\nconst useLoadingHook = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((img) => {\r\n      setState({ data: img, loading: false });\r\n    });\r\n  }, [category]);\r\n  return state;\r\n};\r\n\r\nexport default useLoadingHook;\r\n","import React from \"react\";\r\nimport GifGriditems from \"./GifGriditems\";\r\nimport \"./GifGriditems.css\";\r\nimport useLoadingHook from \"./hooks/useLoadingHook\";\r\nconst GifGrid = ({ category }) => {\r\n  const { data, loading } = useLoadingHook(category);\r\n\r\n  return (\r\n    <>\r\n      <h1> {category}</h1>\r\n\r\n      {loading && <h1>Loading..</h1>}\r\n      <div>\r\n        <ol className=\"list \">\r\n          {data.map((img) => (\r\n            <GifGriditems {...img} key={img.id}></GifGriditems>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategoris from \"./componens/AddCategoris\";\r\nimport GifGrid from \"./componens/GifGrid\";\r\nimport \"./componens/GifGriditems.css\";\r\n\r\nfunction GifExpertapp() {\r\n  const [categories, setCategories] = useState([\"\"]);\r\n  //   const handleAdd = () => {\r\n  //     setCategories([\"heidi\", ...categories]);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"title\">GifExpertapp</h2>\r\n      <AddCategoris setCategories={setCategories} />\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifExpertapp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertapp from \"./GifExpertapp\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <GifExpertapp />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}